# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1qFeAoM_B5jT8p2KJm4j9a3XSmb8FhD
"""

# ==================== STEP 2: CLUSTERING ML ====================
print("\n" + "=" * 70)
print("ðŸ¤– Ã‰TAPE 2: Clustering Machine Learning (KMeans)")
print("=" * 70)

# PrÃ©paration des donnÃ©es pour clustering
X = df[['total_score_performance']].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# KMeans avec 3 clusters
kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
df['cluster'] = kmeans.fit_predict(X_scaled)

# Attribution des labels basÃ©s sur le score moyen par cluster
cluster_means = df.groupby('cluster')['total_score_performance'].mean().sort_values()
cluster_labels = {
    cluster_means.index[0]: 'Needs Improvement',
    cluster_means.index[1]: 'Mid-Range Performers',
    cluster_means.index[2]: 'Top Performers'
}

df['performance_category'] = df['cluster'].map(cluster_labels)

print("\nðŸ“Š RÃ©sultats du clustering:")
clustering_results = df[['supplier', 'total_score_performance', 'performance_category']].sort_values('total_score_performance', ascending=False)
print(clustering_results.to_string())

# Visualisation
plt.figure(figsize=(10, 6))
colors = {'Top Performers': 'green', 'Mid-Range Performers': 'orange', 'Needs Improvement': 'red'}
for category in df['performance_category'].unique():
    mask = df['performance_category'] == category
    plt.scatter(df[mask].index, df[mask]['total_score_performance'],
               c=colors[category], label=category, s=200, alpha=0.7)

plt.xlabel('Supplier Index', fontsize=12)
plt.ylabel('Performance Score (/10)', fontsize=12)
plt.title('Supplier Performance Clustering', fontsize=14, fontweight='bold')
plt.legend()
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()