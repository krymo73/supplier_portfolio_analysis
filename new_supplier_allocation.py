# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1qFeAoM_B5jT8p2KJm4j9a3XSmb8FhD
"""

# ==================== STEP 3: NEW SUPPLIER ALLOCATION ====================
print("\n" + "=" * 70)
print("ðŸ“ˆ Ã‰TAPE 3: calculate new supplier allocation")
print("=" * 70)

# Actual allocation
total_purchase_volume = df['yearly_turnover_$'].sum()
df['current_allocation'] = df['yearly_turnover_$'] / total_purchase_volume

# Allocation factors per scenario
factors = {
    'conservative': {'Top Performers': 1.15, 'Mid-Range Performers': 1.0, 'Needs Improvement': 0.85},
    'aggressive': {'Top Performers': 1.5, 'Mid-Range Performers': 1.0, 'Needs Improvement': 0.8},
    'risk_mitigation': {'Top Performers': 1.2, 'Mid-Range Performers': 1.0, 'Needs Improvement': 0.5}
}

# New allocations
for scenario, factor_dict in factors.items():
    df[f'factor_{scenario}'] = df['performance_category'].map(factor_dict)
    df[f'weighted_{scenario}'] = df['current_allocation'] * df[f'factor_{scenario}']

    # sum normalization = 100%
    total_weighted = df[f'weighted_{scenario}'].sum()
    df[f'new_allocation_{scenario}'] = df[f'weighted_{scenario}'] / total_weighted

print("\nðŸ“Š Allocation per scenario:")
allocation_cols = ['supplier', 'performance_category', 'current_allocation',
                   'new_allocation_conservative', 'new_allocation_aggressive', 'new_allocation_risk_mitigation']
allocation_results = df[allocation_cols].copy()
for col in allocation_cols[2:]:
    allocation_results[col] = allocation_results[col].apply(lambda x: f"{x:.2%}")
print(allocation_results.to_string())