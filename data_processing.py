# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1qFeAoM_B5jT8p2KJm4j9a3XSmb8FhD
"""

"""
supplier_portfolio_analysis
Analyse complÃ¨te de performance fournisseurs avec clustering et optimisation d'allocation
"""

import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files
import io

# ==================== CONFIGURATION ====================
print("=" * 70)
print("supplier_portfolio_analysis")
print("=" * 70)

# ==================== STEP 0: IMPORT DATA ====================
print("\nðŸ“‚ Ã‰TAPE 0: Import des donnÃ©es")
print("-" * 70)

uploaded = files.upload()
filename = list(uploaded.keys())[0]

if filename.endswith('.csv'):
    df = pd.read_csv(io.BytesIO(uploaded[filename]))
elif filename.endswith(('.xlsx', '.xls')):
    df = pd.read_excel(io.BytesIO(uploaded[filename]))
else:
    raise ValueError("Format non supportÃ©. Utilisez CSV ou Excel (.xlsx, .xls)")

print(f"âœ… Fichier '{filename}' importÃ© avec succÃ¨s")
print(f"ðŸ“Š Dimensions: {df.shape[0]} fournisseurs Ã— {df.shape[1]} colonnes\n")

# Nettoyage des noms de colonnes (espaces, majuscules)
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
print("ðŸ§¹ Noms de colonnes nettoyÃ©s:")
print(f"   {list(df.columns)}\n")
print(df.head())

# VÃ©rification des colonnes requises
required_cols = ['supplier', 'country', 'yearly_turnover_$', 'yearly_turnover_unit',
                 'po_volume_yearly', 'avg_quantity_per_po', 'freigth_cost_per_po',
                 'unit_cost_1_to_100', 'unit_cost_100_to_1000', 'unit_cost_over_1000',
                 'conformity_rate_per_po', 'otd_per_po']

missing_cols = [col for col in required_cols if col not in df.columns]
if missing_cols:
    raise ValueError(f"Colonnes manquantes: {missing_cols}")


# ==================== FONCTIONS UTILITAIRES ====================
def normalize_0_10(series, inverse=False):
    """Normalise une sÃ©rie entre 0 et 10. Si inverse=True, inverse l'Ã©chelle."""
    min_val = series.min()
    max_val = series.max()

    if min_val == max_val:
        return pd.Series([5.0] * len(series), index=series.index)

    normalized = 10 * (series - min_val) / (max_val - min_val)

    if inverse:
        normalized = 10 - normalized

    return normalized