# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c1qFeAoM_B5jT8p2KJm4j9a3XSmb8FhD
"""

# ==================== STEP 1: CALCUL SCORE DE PERFORMANCE ====================
print("\n" + "=" * 70)
print("ðŸ“Š Ã‰TAPE 1: Calcul du Score de Performance")
print("=" * 70)

# 1a - DÃ©termination du coÃ»t unitaire appliquÃ©
def get_unit_cost_applied(row):
    qty = row['avg_quantity_per_po']
    if qty <= 100:
        return row['unit_cost_1_to_100']
    elif qty <= 1000:
        return row['unit_cost_100_to_1000']
    else:
        return row['unit_cost_over_1000']

df['unit_cost_applied'] = df.apply(get_unit_cost_applied, axis=1)

# CoÃ»t unitaire total
df['unit_cost_total'] = df['yearly_turnover_unit'] * df['unit_cost_applied']
df['unit_cost_total_norm'] = normalize_0_10(df['unit_cost_total'], inverse=True)

# CoÃ»t de transport total
df['freight_total_cost'] = df['freigth_cost_per_po'] * df['po_volume_yearly']
df['freight_total_cost_norm'] = normalize_0_10(df['freight_total_cost'], inverse=True)

# CoÃ»t de non-qualitÃ©
df['non_quality_cost'] = (1 - df['conformity_rate_per_po']) * df['unit_cost_applied'] * df['yearly_turnover_unit']
df['non_quality_cost_norm'] = normalize_0_10(df['non_quality_cost'], inverse=True)

# Performance prix
df['price_performance'] = (df['unit_cost_total_norm'] * 0.8 +
                           df['freight_total_cost_norm'] * 0.05 +
                           df['non_quality_cost_norm'] * 0.15)
df['price_performance_norm'] = normalize_0_10(df['price_performance'])

print("\nðŸ’° 1a - Total Cost Performance")
print(df[['supplier', 'unit_cost_applied', 'unit_cost_total', 'freight_total_cost', 'non_quality_cost']].to_string())

# 1b - Taux de remise progressive
df['discount_1'] = (df['unit_cost_1_to_100'] - df['unit_cost_100_to_1000']) / df['unit_cost_1_to_100'] * 100
df['discount_2'] = (df['unit_cost_100_to_1000'] - df['unit_cost_over_1000']) / df['unit_cost_100_to_1000'] * 100
df['progressive_discount_rate'] = df['discount_1'] + df['discount_2']
df['progressive_discount_rate_norm'] = normalize_0_10(df['progressive_discount_rate'])

# Total cost performance
df['total_cost_performance'] = (df['progressive_discount_rate_norm'] * 0.2 +
                                 df['price_performance_norm'] * 0.8)

print("\nðŸ“‰ 1b - Progressive Discount Rate")
print(df[['supplier', 'discount_1', 'discount_2', 'progressive_discount_rate']].to_string())

# 1c - Quality performance (z-score normalisÃ©)
avg_quality = df['conformity_rate_per_po'].mean()
std_quality = df['conformity_rate_per_po'].std()

if std_quality == 0:
    df['quality_performance'] = 0
else:
    df['quality_performance'] = (df['conformity_rate_per_po'] - avg_quality) / std_quality

df['quality_performance_norm'] = normalize_0_10(df['quality_performance'])

print(f"\nâœ… 1c - Quality Performance (moyenne: {avg_quality:.2%}, Ïƒ: {std_quality:.4f})")
print(df[['supplier', 'conformity_rate_per_po', 'quality_performance_norm']].to_string())

# 1d - Delivery performance (z-score normalisÃ©)
avg_otd = df['otd_per_po'].mean()
std_otd = df['otd_per_po'].std()

if std_otd == 0:
    df['delivery_performance'] = 0
else:
    df['delivery_performance'] = (df['otd_per_po'] - avg_otd) / std_otd

df['delivery_performance_norm'] = normalize_0_10(df['delivery_performance'])

print(f"\nðŸšš 1d - Delivery Performance (moyenne OTD: {avg_otd:.2%}, Ïƒ: {std_otd:.4f})")
print(df[['supplier', 'otd_per_po', 'delivery_performance_norm']].to_string())

# 1e - Score de performance global
df['total_score_performance'] = (df['total_cost_performance'] * 0.6 +
                                  df['quality_performance_norm'] * 0.2 +
                                  df['delivery_performance_norm'] * 0.2)

print("\nðŸŽ¯ 1e - SCORE DE PERFORMANCE GLOBAL (/10)")
print("-" * 70)
performance_summary = df[['supplier', 'total_cost_performance', 'quality_performance_norm',
                          'delivery_performance_norm', 'total_score_performance']].round(2)
print(performance_summary.to_string())