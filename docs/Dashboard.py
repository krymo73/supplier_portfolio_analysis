# -*- coding: utf-8 -*-
"""Untitled64.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14qlLe0aiWpcvmAb7gKLR4TEvOLuT30Gd
"""

import pandas as pd
import numpy as np
from google.colab import files
import base64
from io import BytesIO
import json

# 1. UPLOAD FILE
print("üìÅ Veuillez uploader votre fichier Excel...")
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# 2. LOAD DATA FROM ALL SHEETS
print("\nüìä Chargement des donn√©es...")
overview_df = pd.read_excel(filename, sheet_name=0)
allocations_df = pd.read_excel(filename, sheet_name=1)
cost_details_df = pd.read_excel(filename, sheet_name=2)
savings_summary_df = pd.read_excel(filename, sheet_name=3)
performance_metrics_df = pd.read_excel(filename, sheet_name=4)

print(f"‚úÖ Donn√©es charg√©es avec succ√®s!")
print(f"   - Overview: {len(overview_df)} fournisseurs")
print(f"   - Allocations: {len(allocations_df)} lignes")
print(f"   - Savings Summary: {len(savings_summary_df)} sc√©narios")

# 3. PREPARE DATA FOR VISUALIZATION
# Supplier Performance
suppliers_performance = overview_df[['supplier', 'total_score_performance']].to_dict('records')
avg_performance = overview_df['total_score_performance'].mean()

# Current Allocation
current_allocation = allocations_df[['supplier', 'current_allocation']].to_dict('records')

# New Allocations by Scenario
new_allocations = {
    'conservative': allocations_df[['supplier', 'new_allocation_conservative']].to_dict('records'),
    'aggressive': allocations_df[['supplier', 'new_allocation_aggressive']].to_dict('records'),
    'risk_mitigation': allocations_df[['supplier', 'new_allocation_risk_mitigation']].to_dict('records')
}

# Cost Comparison
cost_comparison = savings_summary_df[['Scenario', 'portfolio_cost_current', 'portfolio_cost_new']].to_dict('records')

# Savings
savings_data = savings_summary_df[['Scenario', 'savings_absolute', 'savings_percent', 'savings_non_quality']].to_dict('records')

# 4. GENERATE HTML DASHBOARD
html_template = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Supplier Portfolio Analysis Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.0.0/chartjs-plugin-datalabels.min.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0f1e 0%, #1a1a2e 100%);
            color: #e0e0e0;
            padding: 20px;
            min-height: 100vh;
        }}

        .dashboard-header {{
            text-align: center;
            margin-bottom: 30px;
            padding: 30px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }}

        .dashboard-header h1 {{
            font-size: 2.8em;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
            font-weight: 700;
            text-shadow: 0 0 30px rgba(102, 126, 234, 0.5);
        }}

        .dashboard-header p {{
            color: #a0a0b0;
            font-size: 1.1em;
        }}

        .metrics-row {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}

        .metric-card {{
            background: rgba(255, 255, 255, 0.05);
            padding: 25px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transform: perspective(1000px) rotateX(2deg);
        }}

        .metric-card:hover {{
            transform: perspective(1000px) rotateX(0deg) translateY(-5px);
            box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);
        }}

        .metric-label {{
            font-size: 0.9em;
            color: #a0a0b0;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
        }}

        .metric-value {{
            font-size: 2.5em;
            font-weight: 700;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }}

        .metric-subtext {{
            font-size: 0.85em;
            color: #70707a;
            margin-top: 8px;
        }}

        .chart-container {{
            background: rgba(255, 255, 255, 0.05);
            padding: 30px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            transform: perspective(1000px) rotateX(1deg);
            transition: transform 0.3s ease;
        }}

        .chart-container:hover {{
            transform: perspective(1000px) rotateX(0deg);
        }}

        .chart-title {{
            font-size: 1.5em;
            margin-bottom: 20px;
            color: #ffffff;
            font-weight: 600;
        }}

        .section-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}

        canvas {{
            max-height: 400px;
        }}

        .savings-card {{
            background: linear-gradient(135deg, rgba(236, 72, 153, 0.15) 0%, rgba(59, 130, 246, 0.15) 100%);
            border: 1px solid rgba(236, 72, 153, 0.5);
        }}

        .positive-savings {{
            color: #4ade80;
        }}

        @media (max-width: 768px) {{
            .section-grid {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="dashboard-header">
        <h1>üìä Supplier Portfolio Analysis</h1>
        <p>Comprehensive Performance & Allocation Dashboard</p>
    </div>

    <!-- KEY METRICS -->
    <div class="metrics-row">
        <div class="metric-card">
            <div class="metric-label">Avg Performance Score</div>
            <div class="metric-value">{avg_performance:.1f}</div>
            <div class="metric-subtext">Across all suppliers</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Total Suppliers</div>
            <div class="metric-value">{len(overview_df)}</div>
            <div class="metric-subtext">Active in portfolio</div>
        </div>
        <div class="metric-card">
            <div class="metric-label">Scenarios Analyzed</div>
            <div class="metric-value">{len(savings_summary_df)}</div>
            <div class="metric-subtext">Optimization strategies</div>
        </div>
    </div>

    <!-- SECTION 1: SUPPLIER PERFORMANCE -->
    <div class="chart-container">
        <div class="chart-title">1. Supplier Performance Scores</div>
        <canvas id="performanceChart"></canvas>
    </div>

    <!-- SECTION 2 & 3: ALLOCATIONS -->
    <div class="section-grid">
        <div class="chart-container">
            <div class="chart-title">2. Current Allocation Portfolio</div>
            <canvas id="currentAllocationChart"></canvas>
        </div>
        <div class="chart-container">
            <div class="chart-title">3. New Allocation Scenarios</div>
            <canvas id="newAllocationChart"></canvas>
        </div>
    </div>

    <!-- SECTION 4: COST COMPARISON -->
    <div class="chart-container">
        <div class="chart-title">4. Cost Comparison by Scenario</div>
        <canvas id="costComparisonChart"></canvas>
    </div>

    <!-- SECTION 5: SAVINGS -->
    <div class="chart-container savings-card">
        <div class="chart-title">5. Savings Analysis</div>
        <canvas id="savingsChart"></canvas>
    </div>

    <script>
        // Register the datalabels plugin
        Chart.register(ChartDataLabels);

        // Chart.js Global Config
        Chart.defaults.color = '#e0e0e0';
        Chart.defaults.borderColor = 'rgba(255, 255, 255, 0.1)';
        Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";

        const chartColors = {{
            primary: ['#667eea', '#764ba2', '#f093fb', '#4facfe', '#43e97b', '#fa709a'],
            pink: '#ec4899',
            blue: '#3b82f6',
            gradient1: '#667eea',
            gradient2: '#764ba2',
            success: '#4ade80',
            warning: '#fbbf24',
            danger: '#f87171',
            red: '#ef4444'
        }};

        // 1. SUPPLIER PERFORMANCE CHART WITH 3D EFFECT
        const performanceData = {json.dumps(suppliers_performance)};
        const suppliers = performanceData.map(d => d.supplier);
        const scores = performanceData.map(d => d.total_score_performance);
        const avgScore = {avg_performance};

        const ctx1 = document.getElementById('performanceChart').getContext('2d');
        const gradient1 = ctx1.createLinearGradient(0, 0, 0, 400);
        gradient1.addColorStop(0, 'rgba(102, 126, 234, 0.8)');
        gradient1.addColorStop(1, 'rgba(118, 75, 162, 0.8)');

        new Chart(ctx1, {{
            type: 'bar',
            data: {{
                labels: suppliers,
                datasets: [
                    {{
                        label: 'Performance Score',
                        data: scores,
                        backgroundColor: gradient1,
                        borderRadius: 8,
                        borderWidth: 2,
                        borderColor: '#667eea',
                        shadowOffsetX: 3,
                        shadowOffsetY: 3,
                        shadowBlur: 10,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }},
                    {{
                        label: 'Average Score',
                        data: Array(scores.length).fill(avgScore),
                        type: 'line',
                        borderColor: chartColors.red,
                        borderWidth: 3,
                        borderDash: [10, 5],
                        pointRadius: 0,
                        fill: false,
                        tension: 0
                    }}
                ]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: true,
                plugins: {{
                    legend: {{
                        display: true,
                        position: 'top',
                        labels: {{
                            color: '#e0e0e0',
                            padding: 15,
                            font: {{ size: 12, weight: 'bold' }}
                        }}
                    }},
                    tooltip: {{
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        padding: 12,
                        titleColor: '#fff',
                        bodyColor: '#e0e0e0',
                        borderColor: '#667eea',
                        borderWidth: 1
                    }},
                    datalabels: {{
                        anchor: 'end',
                        align: 'top',
                        color: '#ffffff',
                        font: {{ size: 13, weight: 'bold' }},
                        formatter: function(value, context) {{
                            if (context.datasetIndex === 0) {{
                                return value.toFixed(1);
                            }}
                            return null;
                        }},
                        backgroundColor: 'rgba(102, 126, 234, 0.8)',
                        borderRadius: 4,
                        padding: 4
                    }}
                }},
                scales: {{
                    y: {{
                        beginAtZero: true,
                        grid: {{ color: 'rgba(255, 255, 255, 0.05)' }},
                        ticks: {{ color: '#e0e0e0' }}
                    }},
                    x: {{
                        grid: {{ display: false }},
                        ticks: {{ color: '#e0e0e0' }}
                    }}
                }}
            }}
        }});

        // 2. CURRENT ALLOCATION PIE CHART WITH 3D EFFECT AND %
        const currentAlloc = {json.dumps(current_allocation)};
        const ctx2 = document.getElementById('currentAllocationChart').getContext('2d');

        new Chart(ctx2, {{
            type: 'doughnut',
            data: {{
                labels: currentAlloc.map(d => d.supplier),
                datasets: [{{
                    data: currentAlloc.map(d => d.current_allocation),
                    backgroundColor: chartColors.primary,
                    borderWidth: 3,
                    borderColor: '#1a1a2e',
                    hoverOffset: 15
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: true,
                plugins: {{
                    legend: {{
                        position: 'right',
                        labels: {{
                            color: '#e0e0e0',
                            padding: 15,
                            font: {{ size: 12, weight: 'bold' }}
                        }}
                    }},
                    tooltip: {{
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        callbacks: {{
                            label: function(context) {{
                                return context.label + ': ' + context.parsed.toFixed(1) + '%';
                            }}
                        }}
                    }},
                    datalabels: {{
                        color: '#ffffff',
                        font: {{ size: 14, weight: 'bold' }},
                        formatter: function(value, context) {{
                            return value.toFixed(1) + '%';
                        }},
                        backgroundColor: 'rgba(0, 0, 0, 0.6)',
                        borderRadius: 4,
                        padding: 6
                    }}
                }}
            }}
        }});

        // 3. NEW ALLOCATION SCENARIOS WITH % ON BARS
        const newAlloc = {json.dumps(new_allocations)};
        const scenarioLabels = newAlloc.conservative.map(d => d.supplier);
        const ctx3 = document.getElementById('newAllocationChart').getContext('2d');

        new Chart(ctx3, {{
            type: 'bar',
            data: {{
                labels: scenarioLabels,
                datasets: [
                    {{
                        label: 'Conservative',
                        data: newAlloc.conservative.map(d => d.new_allocation_conservative),
                        backgroundColor: 'rgba(102, 126, 234, 0.8)',
                        borderColor: '#667eea',
                        borderWidth: 2,
                        borderRadius: 6
                    }},
                    {{
                        label: 'Aggressive',
                        data: newAlloc.aggressive.map(d => d.new_allocation_aggressive),
                        backgroundColor: 'rgba(118, 75, 162, 0.8)',
                        borderColor: '#764ba2',
                        borderWidth: 2,
                        borderRadius: 6
                    }},
                    {{
                        label: 'Risk Mitigation',
                        data: newAlloc.risk_mitigation.map(d => d.new_allocation_risk_mitigation),
                        backgroundColor: 'rgba(240, 147, 251, 0.8)',
                        borderColor: '#f093fb',
                        borderWidth: 2,
                        borderRadius: 6
                    }}
                ]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: true,
                plugins: {{
                    legend: {{
                        position: 'top',
                        labels: {{
                            color: '#e0e0e0',
                            padding: 15,
                            font: {{ size: 12, weight: 'bold' }}
                        }}
                    }},
                    datalabels: {{
                        anchor: 'end',
                        align: 'top',
                        color: '#ffffff',
                        font: {{ size: 11, weight: 'bold' }},
                        formatter: function(value) {{
                            return value.toFixed(1) + '%';
                        }},
                        backgroundColor: 'rgba(0, 0, 0, 0.6)',
                        borderRadius: 3,
                        padding: 3
                    }}
                }},
                scales: {{
                    y: {{
                        beginAtZero: true,
                        grid: {{ color: 'rgba(255, 255, 255, 0.05)' }},
                        ticks: {{
                            callback: value => value + '%',
                            color: '#e0e0e0'
                        }}
                    }},
                    x: {{
                        grid: {{ display: false }},
                        ticks: {{ color: '#e0e0e0' }}
                    }}
                }}
            }}
        }});

        // 4. COST COMPARISON - PINK & BLUE WITH $ VALUES
        const costData = {json.dumps(cost_comparison)};
        const ctx4 = document.getElementById('costComparisonChart').getContext('2d');

        new Chart(ctx4, {{
            type: 'bar',
            data: {{
                labels: costData.map(d => d.Scenario),
                datasets: [
                    {{
                        label: 'Current Cost',
                        data: costData.map(d => d.portfolio_cost_current),
                        backgroundColor: 'rgba(236, 72, 153, 0.8)',
                        borderColor: chartColors.pink,
                        borderWidth: 2,
                        borderRadius: 8
                    }},
                    {{
                        label: 'New Cost',
                        data: costData.map(d => d.portfolio_cost_new),
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderColor: chartColors.blue,
                        borderWidth: 2,
                        borderRadius: 8
                    }}
                ]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: true,
                plugins: {{
                    legend: {{
                        position: 'top',
                        labels: {{
                            color: '#e0e0e0',
                            padding: 15,
                            font: {{ size: 12, weight: 'bold' }}
                        }}
                    }},
                    tooltip: {{
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        callbacks: {{
                            label: function(context) {{
                                return context.dataset.label + ': $' + context.parsed.y.toLocaleString();
                            }}
                        }}
                    }},
                    datalabels: {{
                        anchor: 'end',
                        align: 'top',
                        color: '#ffffff',
                        font: {{ size: 12, weight: 'bold' }},
                        formatter: function(value) {{
                            return '$' + value.toLocaleString();
                        }},
                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                        borderRadius: 4,
                        padding: 4
                    }}
                }},
                scales: {{
                    y: {{
                        beginAtZero: true,
                        grid: {{ color: 'rgba(255, 255, 255, 0.05)' }},
                        ticks: {{
                            callback: value => '$' + value.toLocaleString(),
                            color: '#e0e0e0'
                        }}
                    }},
                    x: {{
                        grid: {{ display: false }},
                        ticks: {{ color: '#e0e0e0' }}
                    }}
                }}
            }}
        }});

        // 5. SAVINGS - % SCALE WITH $ VALUES - PINK & BLUE
        const savingsData = {json.dumps(savings_data)};
        const ctx5 = document.getElementById('savingsChart').getContext('2d');

        new Chart(ctx5, {{
            type: 'bar',
            data: {{
                labels: savingsData.map(d => d.Scenario),
                datasets: [{{
                    label: 'Savings %',
                    data: savingsData.map(d => d.savings_percent),
                    backgroundColor: 'rgba(236, 72, 153, 0.8)',
                    borderColor: chartColors.pink,
                    borderWidth: 2,
                    borderRadius: 8,
                    yAxisID: 'y'
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: true,
                plugins: {{
                    legend: {{
                        display: true,
                        labels: {{
                            color: '#e0e0e0',
                            font: {{ size: 12, weight: 'bold' }}
                        }}
                    }},
                    tooltip: {{
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        callbacks: {{
                            label: function(context) {{
                                const index = context.dataIndex;
                                const percent = savingsData[index].savings_percent;
                                const absolute = savingsData[index].savings_absolute;
                                return [
                                    'Savings: ' + percent.toFixed(2) + '%',
                                    'Amount: $' + absolute.toLocaleString()
                                ];
                            }}
                        }}
                    }},
                    datalabels: {{
                        anchor: 'end',
                        align: 'top',
                        color: '#ffffff',
                        font: {{ size: 12, weight: 'bold' }},
                        formatter: function(value, context) {{
                            const index = context.dataIndex;
                            const absolute = savingsData[index].savings_absolute;
                            return '$' + absolute.toLocaleString() + '\\n(' + value.toFixed(1) + '%)';
                        }},
                        backgroundColor: 'rgba(0, 0, 0, 0.7)',
                        borderRadius: 4,
                        padding: 6
                    }}
                }},
                scales: {{
                    y: {{
                        beginAtZero: true,
                        position: 'left',
                        grid: {{ color: 'rgba(255, 255, 255, 0.05)' }},
                        ticks: {{
                            callback: value => value + '%',
                            color: '#e0e0e0'
                        }}
                    }},
                    x: {{
                        grid: {{ display: false }},
                        ticks: {{ color: '#e0e0e0' }}
                    }}
                }}
            }}
        }});
    </script>
</body>
</html>
"""

# 5. SAVE HTML FILE
output_filename = 'supplier_portfolio_dashboard.html'
with open(output_filename, 'w', encoding='utf-8') as f:
    f.write(html_template)

print(f"\n‚úÖ Dashboard g√©n√©r√© avec succ√®s!")
print(f"üìÑ Fichier: {output_filename}")

# 6. DOWNLOAD THE FILE
print("\n‚¨áÔ∏è T√©l√©chargement du dashboard...")
files.download(output_filename)

print("\nüéâ Termin√©! Ouvrez le fichier HTML dans votre navigateur.")